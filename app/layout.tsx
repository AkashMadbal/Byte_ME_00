import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { Providers } from "./providers";
import "./globals.css";
import Script from "next/script";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        {/* Direct fix for specific error - loaded before any other scripts */}
        <Script
          id="direct-fix"
          src="/direct-fix.js"
          strategy="beforeInteractive"
        />

        {/* Global error handler script */}
        <Script
          id="error-handler"
          src="/error-handler.js"
          strategy="beforeInteractive"
        />

        {/* Fallback inline error handler */}
        <Script
          id="inline-error-handler"
          strategy="beforeInteractive"
          dangerouslySetInnerHTML={{
            __html: `
              // Additional inline patch for specific error at line 521
              (function patchSpecificError() {
                try {
                  // Create a MutationObserver to watch for script additions
                  const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                      if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(function(node) {
                          if (node.tagName === 'SCRIPT' && node.src && node.src.includes('_523af1')) {
                            console.log('Intercepted problematic script load:', node.src);
                            // Prevent the script from loading
                            node.type = 'javascript/blocked';
                            // Create a replacement script with safe implementation
                            const safeScript = document.createElement('script');
                            safeScript.textContent = 'window.__SAFE_IMPLEMENTATION = true;';
                            document.head.appendChild(safeScript);
                          }
                        });
                      }
                    });
                  });

                  // Start observing the document
                  observer.observe(document, { childList: true, subtree: true });

                  // Global error handlers specifically for line 521
                  window.addEventListener('error', function(event) {
                    if (event.filename && event.filename.includes('_523af1')) {
                      if (event.lineno === 521) {
                        console.log('Line 521 error caught:', event);
                        event.preventDefault();
                        return true;
                      }
                    }
                  });
                } catch (e) {
                  console.error('Error in patch function:', e);
                }
              })();
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}
